// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id                Int        @id @default(autoincrement())
  clientId          String     @unique 
  apiKeyHash        String     
  clientSecretHash  String     
  mpStatToken       String?
  name              String?
  createAt          DateTime   @default(now())
  updateAt          DateTime   @updatedAt
  analytics         Analytics[]
  stock_warehouse   Stock_Warehouse[]
  transactions      Transaction_List[]
  product           Product_List[]
}

model Analytics {
  id                  Int   @id @default(autoincrement())
  createAt            DateTime   @default(now())
  updateAt            DateTime   @updatedAt 
  //
  userId              Int
  user                User   @relation(fields: [userId], references: [id])
  //dimensions
  dimensions          String?
  //metrics
  revenue             Int?
  ordered_units       Int?    
  unknown_metric      Int?      
  hits_view_pdp       Int?    
  hits_view           Int?
  hits_tocart_search  Int?            
  hits_tocart_pdp     Int?        
  hits_tocart         Int?    
  session_view_search Int?              
  session_view_pdp    Int?          
  session_view        Int?      
  conv_tocart_search  Int?            
  conv_tocart_pdp     Int?          
  conv_tocart         Int?      
  returns             Int?  
  cancellations       Int?        
  delivered_units     Int?        
  position_category   Int?          
}

model Stock_Warehouse {
  id                  Int     @id @default(autoincrement()) 
  createAt            DateTime   @default(now())
  updateAt            DateTime   @updatedAt
  //
  userId              Int
  user                User      @relation(fields: [userId], references: [id])
  //
  sku	                Int
  warehouse_name      String
  item_code	          String
  item_name	          String
  free_to_sell_amount	Int
  promised_amount	    Int
  reserved_amount	    Int
  idc                 Float?
  
}
 


model Transaction_List {
  id                      Int     @id @default(autoincrement()) 
  createAt                DateTime   @default(now())
  updateAt                DateTime   @updatedAt
  //
  userId                  Int
  user                    User      @relation(fields: [userId], references: [id])
  // operetions
  operation_id            BigInt
  operation_type          String
  operation_date          String
  operation_type_name     String
  delivery_charge         Int
  return_delivery_charge  Int
  accruals_for_sale       Int
  sale_commission         Int
  amount                  Float
  type                    String
  //delivery schema
  delivery_schema         String?
  order_date              String?
  posting_number          String?
  warehouse_id            BigInt?
  //items
  items                   String?
  //services
  services                String?
}


model Product_List {
  id                  Int     @id @default(autoincrement()) 
  createAt            DateTime   @default(now())
  updateAt            DateTime   @updatedAt
  //
  userId              Int
  user                User      @relation(fields: [userId], references: [id])
  //
  archived            Boolean
  has_fbo_stocks      Boolean
  has_fbs_stocks      Boolean
  is_discounted       Boolean
  offer_id            String
  product_id          BigInt
  // quants
  quant_code          String?
  quant_size          Int?
}


model JournalErrors {
  id               Int       @id @default(autoincrement())
  
  errorUserId      Int
  errorCode        String?
  errorMassage     String
  errorPriority    Int
  errorServiceName String
  priorityDesign   String  @default("{0: small priority, 1: mean priority, 2: hight priority, 3: very hight priority}")

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}